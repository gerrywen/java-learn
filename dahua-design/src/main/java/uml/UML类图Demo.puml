@startuml

abstract class 动物<<动物类>> {
    + 有生命
    + 新陈代谢(in 02 : 氧气 in water : 水)
    + 繁殖()
}

class 氧气

class 水


氧气 <.. 动物 : 依赖
水 <.. 动物 : 依赖



note right of 动物 : 类\n 第一行：类名称\n 第二行：特性（字段或属性）\n 第三行：操作（方法或行为）\n\n 注意：若类名称为斜体字，\n则此类为抽像类
note "依赖关系" as N1
氧气 .. N1
N1 .. 水



abstract class 鸟<<鸟类>> {
    + 羽毛
    + 有角质喙没有牙齿
    + 下蛋()
}

class 翅膀

鸟 *--> 翅膀
动物 <|-- 鸟

note "合成(组合)关系" as N2
鸟 .. N2
N2 .. 翅膀


class 大雁{
    + 下蛋()
    + 飞()
}
class 鸭{
    + 下蛋()
}
class 企鹅{
    + 下蛋()
}

鸟 <|-- 大雁
鸟 <|-- 鸭
鸟 <|-- 企鹅

class 雁群{
    + V型飞行()
    + 一型飞行()
}

class 气候

雁群 o--> 大雁
企鹅 o--> 气候

note "聚合关系" as N3
雁群 .. N3
N3 .. 大雁

note "关联关系" as N4
企鹅 .. N4
N4 .. 气候

class 飞翔<<interface>> {
    + 飞()
}

大雁 ..|> 飞翔

note "实现接口" as N5
大雁 .. N5
N5 .. 飞翔

note right of 飞翔 : 接口\n 矩形表示法，顶端<<interface>>\n 第一行：接口名称\n 第二行：接口方法\n


class 唐老鸭{
    + 讲话()
}

鸭 <|-- 唐老鸭

note "继承关系" as N6
鸭 .. N6
N6 .. 唐老鸭


@enduml